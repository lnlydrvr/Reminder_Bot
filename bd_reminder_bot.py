import sqlite3
from datetime import datetime, time
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from telegram.ext import JobQueue

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
conn = sqlite3.connect("birthdays.db")
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS birthdays (
             user_id INTEGER, 
             username TEXT, 
             chat_id INTEGER,
             birthday DATE)''')
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–î–æ–±—Ä–æ–≥–æ –¥–Ω—è —Ç–µ–±–µ, SWAT–æ–≤–µ—Ü! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY. ‚úçÔ∏è")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
async def save_birthday(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.first_name
    chat_id = update.message.chat_id

    try:
        birthday = datetime.strptime(update.message.text, "%d-%m-%Y").date()
        c.execute("INSERT OR REPLACE INTO birthdays (user_id, username, chat_id, birthday) VALUES (?, ?, ?, ?)",
                  (user_id, username, chat_id, birthday))
        conn.commit()
        await update.message.reply_text("–°–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –û–∂–∏–¥–∞–π –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å. ü´°")
    except ValueError:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ —Ç—ã—ã –Ω–µ —Ç–æ –Ω–∞–ø–∏—Å–∞–ª... –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç DD-MM-YYYY.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
async def check_birthdays(context: CallbackContext):
    bot: Bot = context.bot
    today = datetime.now().date()

    c.execute("SELECT username, chat_id FROM birthdays WHERE strftime('%m-%d', birthday) = ?", (today.strftime("%m-%d"),))
    results = c.fetchall()

    for username, chat_id in results:
        await bot.send_message(chat_id=chat_id, text=f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É @{username}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –±–æ–π—Ü–∞!üéâ")
        await bot.se

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == "__main__":
    TOKEN = "7626935089:AAHvVtQ7uED7jF40x6jhL9Qrc7Epdpu7wGU"
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^\d{2}-\d{2}-\d{4}$"), save_birthday))

    # –°–æ–∑–¥–∞–µ–º JobQueue –≤—Ä—É—á–Ω—É—é –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
    job_queue = JobQueue()
    job_queue.set_application(application)
    job_queue.run_daily(check_birthdays, time=time(hour=9))

    # –ó–∞–ø—É—Å–∫–∞–µ–º JobQueue –∏ –±–æ—Ç–∞
    job_queue.start()
    application.run_polling()