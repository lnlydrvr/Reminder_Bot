from telethon import TelegramClient, events
import sqlite3
from datetime import datetime, time
import asyncio
from api_settings import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –±–æ—Ç–∞
client = TelegramClient('bot_session', api_id, api_hash).start(bot_token=bot_token)
group_chat_id = None

# –ó–∞–ø–∏—Å—å ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
@client.on(events.ChatAction)
async def capture_group_id(event):
    global group_chat_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    if event.is_group:
        group_chat_id = event.chat_id
        print(f"ID –≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {group_chat_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Ñ–∞–π–ª
        with open("group_id.txt", "w") as file:
            file.write(str(group_chat_id))

with open("group_id.txt", "r") as file:
    group_chat_id = int(file.read().strip())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = sqlite3.connect('birthdays.db')
cursor = db.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS birthdays (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    birthday DATE
)
""")
db.commit()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
@client.on(events.NewMessage(pattern='/set_birthday'))
async def set_birthday(event):
    try:
        args = event.message.text.split()
        if len(args) < 2:
            await event.reply('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /set_birthday DD-MM-YYYY')
            return
        
        date = args[1]
        birthday = datetime.strptime(date, "%d-%m-%Y").date()
        user_id = event.sender_id
        username = event.sender.username or event.sender.first_name
        
        cursor.execute("REPLACE INTO birthdays (user_id, username, birthday) VALUES (?, ?, ?)", 
                       (user_id, username, birthday))
        db.commit()
        
        await event.reply(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {birthday.strftime('%d-%m-%Y')} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    
    except ValueError:
        await event.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_birthday DD-MM-YYYY")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
async def check_birthdays():
    now = datetime.now()
    today = now.date()
    current_time = now.time()
    
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–µ —Ä–∞–≤–Ω–æ 7:00 —É—Ç—Ä–∞, –≤—ã—Ö–æ–¥–∏–º
    if current_time != time(7, 0):
        return

    cursor.execute("SELECT username, birthday FROM birthdays")
    for username, birthday in cursor.fetchall():
        # –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∫ —Ç–µ–∫—É—â–µ–º—É –≥–æ–¥—É
        next_birthday = datetime.strptime(birthday, "%Y-%m-%d").date().replace(year=today.year)
        if next_birthday == today:
            await client.send_message(
                group_chat_id,
                f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É @{username}! üéâ"
            )

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async def scheduler():
    while True:
        await check_birthdays()
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await client.start(bot_token=bot_token)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    asyncio.create_task(scheduler())

    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
